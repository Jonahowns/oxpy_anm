v. 3.4.2
	- Change libcommon.so to liboxdna_common.so, allowing the file to be reasonably placed in a system-wide / non-specific library directory
	- Add methods to sync data from and to CUDA interactions (see 7e437f63a8c551333b677d56edc20121551741da)
	- Fix a bug whereby confs without momenta would be printed with trailing spaces
	- Fix a bug whereby the code wouldn't sometimes compile with CUDA 10.x
	- Update a CUDA error message
	- Fix some typos in the documentation
	oxpy:
	  - Fix a bug whereby oxpy couldn't be compiled in debug mode (-DDebug=True)
	oat:
	  - Fix external_force_utils import in exclude_force.py

v. 3.4.1 
	- Fix a compilation bug of a contrib observable

v. 3.4 [1c89963]
	- Observables can now update their data structures while the sim runs
	- Add a new observable to compute the stress autocorrelation
	- Normalise the behaviour of log-lin trajectories
	- Improve error messages on CUDA
	- Remove a deprecated function by reworking how textures are accessed
	- Fix a bug whereby the kinetic energy was not correctly printed to configuration files (issue #22)
	- Fix a bug whereby RNA simulations with CUDA11 would crash
	- Fix a bug in the CUDA barostat that sometimes made the code crash
	- Fix a bug whereby "use_average_seq" would be always interpreted as an int rather than a boolean value (issue #27)
	- Fix a bug whereby the code would not compile on Apple systems (issue #30)
	oxpy:
		- Make it possible to access the last_conf observable from python
		- Add a Jupyter Notebook example
		- Make the code deallocate ConfigInfo at the end of each simulation
		- Fix a bug whereby oxpy simulations on CUDA couldn't be run consequently
		- Fix a bug whereby the ConfigInfo object wouldn't be accessible from Python through the analysis backend 
	oat:
		- Clarify python version requirements
		- Change svd_align to not always align to (0, 0, 0)
		- Add oxview visual bindings
		- Update get_confs to handle times larger than the max value of int
		- Update pca to have CLI control over how many oxView json files get printed (see issue #24)
		- Add cli documentation to oat
		- Fix a typo in db_to_force parser
	- Several documentation improvements

v. 3.3 [7cb66cf]
	- Add variables to the input file
	- Add support for mathematical expressions to the input file
	- Add tests for the new input features
	- Greatly improve the performance of the configuration parser. The speed increase is very noticeable when using DNAnalysis on large trajectories.
	- Add a Python-powered metadynamics interface (examples/METADYNAMICS)
	- Add Python bindings to the external forces
	- Add support for observable and external force files written in JSON
	- Add tests for oxpy
	- Complete rewrite of the docs files. The documentation is now much more complete and handled by sphinx
	- Remove the old (and outdated) UTILS folder
	- Add oxDNA_analysis_tools to the repo (in the analysis folder)

v. 3.2.1 [ee2553c]
	- Fix a bug by avoiding free'ing uninitialised CUDA arrays
	- Substitute a call to the deprecated cudaThreadSetCacheConfig function
	- Fix compilation with double precision on CUDA
	- Fix compilation of plugins on Mac OS X and remove warnings
	- Port the COMForce force to CUDA
	- Reduce the host memory consumption when using forces on CUDA
	- Add an overloaded operator to print LR_matrix instances
	- Make a Python3-compatible version of the standalone generator

v. 3.2.0 [399f3e4]
	- Add the list of papers to cite to the README and to the oxDNA output
	- Add a method to remove outputs from the simulation
	- Refactor IBaseInteraction to remove the need of the Curiously Recurring Template Pattern
	- Move methods from IBaseInteraction to Mesh
	- Remove warnings found by clang
	- Compile with the -march=native option by default (use -DNATIVE_COMPILATION=Off to disable it)
	- Add a new object (FlattenedConfigInfo) to access the simulation details as plain arrays, which get turned into numpy arrays on Python
	- Add a Molecule class to the python bindings
	- Port the test suite to python3
	- Create bindings for the AnalysisBackend class
	- Make it possible to install a GPU-powered oxpy with pip
	- Bugfixing
		- Fix the way the DNA and RNA sites where computed on Python

v. 3.1.2 [83e7823]
	- Add a rudimentary subscriber/notifier mechanism and use it to implement a way of handling temperature changes
	- Make the code compilable with the -DMPI=ON option
	- Remove calls to tmpfile() from the codebase
	- Use setuptools and setuptools-scm to install the python bindings
	- Make oxpy installable with pip
	- Add an example implementing replica-exchange MD simulations with oxpy
	- Make it possible to define custom observables on Python
	- Update github's issue templates
	- Add a github workflow to update the online python documentation
	- Bugfixing:
		- Fix a bug whereby a failing list update on CUDA would not throw an exception as it should
		- Fix compilation of oxpy and with CUDA

v. 3.1.1 [c83eda2]
	- Make oxDNA compile with older CMake versions
	- Add github CI scripts
	- Remove a few useless members from SimBackend
	- Make the code compatible with CUDA 11
	- Make it possible to print non-averaged density profiles
	- Add a method to print a configuration at will from Python (OxpyManager::print_configuration)
	- Add a method to get the system's total energy (OxpyManager::system_energy)
	- Bugfixing:
		- Fix a bug whereby the Hilbert sorting done on GPU would lead to wrong results due to a wrong updating of the particle data structures
		- Fix a bug a CPU simulation run with a CUDA-enabled oxDNA would take up a GPU

v. 3.1.0 [0897aa1]
	- Implement a molecular barostat (i.e. a barostat that acts on the centres of mass of molecules)
	- Add a simple in-backend implementation of another Langevin thermostat
	- Add data structures to handle "molecules"
	- LR_vector* changed in bool in IBaseInteraction's methods
	- Add an oxpy example
	- Improve oxpy's documentation
	- Make it possible to change the input file options from Python
	- Make plugins loadable also from oxpy
	- Create a `utils` Python module
	- Add python bindings to obtain the positions of nucleotide sites
	- Add Python bindings for BaseObservable
	- Bugfixing:
		- Make it possible to compile the contrib folders with old CMake versions
		- Fix a small bug in VolumeMove and CUDA barostat

v. 3.0.0-alpha [5634f27]
	- Python bindings are now available. It is now possible to run simulations from Python, although not every option is available and most behaviour is still controlled by the input file
	- Substitute the `number` and `number4` templated stuff with `using` statements (which are equivalent to `typedef`s) chosen at compile time:
		* on the CPU side the default precision is `double`;
		* on the CUDA side `number` and `number4` have become `c_number` and `c_number4` and default to `float` and `float4`;
		* on CUDA the mixed precision can be used only if `-DCUDA_DOUBLE=OFF`, which is the default behaviour.
	- Plugins now require a single entry point, which should be called `make_MyPlugin`, where `MyPlugin` is the name of the plugin class (and file).
	- The codebase underwent a substantial cleaning up; compilation time went down and performance went up by a few percent.

v. 2.4 (revision 6963, 27th June 2019)
	- Added a r_ext option to RepulsiveSphere which acts as an optional outer cut-off
	- Added a parallel tempering backend for Monte Carlo simulations
	- Now external forces are accounted for during configuration generation through their associated Boltzmann factor
	- RepulsiveSphere now uses the _add_self_to_particles method that makes it possible to write expressiones like "particle = 0-999" instead of having 1000 times near-copies of the same stanza
	- GenericCentralForce now supports an E_shift option to shift the non-zero portion of the energy. Useful during configuration generation
	- Added the option to use plugin manager to dynamically load custom MCMove class for MC2 Backend from contrib
	- Added a "rate" option to mutual traps in order to make their strength time-dependent
	- Added the "compute_energy_before" option to MC2 Moves not to compute the energy before the move, useful in case of purely repulsive hard potentials. Defaults to true
	- Made oxDNA compatible with CUDA 9.1 and remove a few subsequent warnings
	- Made the G and DBG cmake options work also with nvcc
	- Added a new option to cmake (CUDA_COMMON_ARCH) that is set to ON by default. If ON, this optional will make oxDNA be compiled for a list of architectures that depend on the installed CUDA version. This might result in a very slow compilation. Use -DCUDA_COMMON_ARCH=OFF to have cmake detect the installed GPU and compile only for its arch
	Bug fixes:
	- Mutual traps now work in the same way on the CPU and GPU backends
	- General bug fixes to the Writhe observable, which now works as intended also when plectonemes are close to the end of the chain
	- Fixed a bug whereby the code would segfault when PairEnergy was given incorrect particle indexes. Now the code exits with a meaningful message instead
	- Fixed the umpteenth fix_diffusion bug which unphysically made the system's centre of mass move towards the -1,-1,-1 direction
	- Fixed a bug with the cadnano interface by making sure that new_nodes.begin and new_nodes.end are the same length at the end of the "insert_loop_skip" method	
	- Updated base.py to avoid ValueError exceptions when variables that may be numpy arrays are checked against None's and True's

v 2.3.2
	Bugfixing release:
	- Fixed a bug in SimManager.cpp that would make the ambiguous case of equilibration_steps>0
	  and restart_step_counter=false misbehave
	- Removed the inclusion of xlocale.h from defs.h

v 2.3.1
	Bugfixing release:
	- Fixed a bug that would prevent compilation on Apple systems
	- Fixed a bug introduced in the previous version that broke the mindistance order parameter.
	- Fixed a bug in the cadnano_interface.py that prevented the processing of sequence files with 
	  \r\n newline sequences.
	- Added a function to SantaLucia.py that computes the melting temperature of a duplex from given 
	  values of DeltaH, DeltaS, and duplex concentration.
	- Minor clean-up to SantaLucia.py and cullTraj.py.

v 2.3 (revision 6874, February 2018)
	This new version contains a lot of under-the-hood improvements and a few more features. As 
	far as we can tell, the code is fully backward compatible (input-file-wise).
	Here is a condensed list of changes:
	- It is now possible to write interactions that feature three-body contributions. The only 
	perative difference is that each particle now stores a vector of ParticlePair objects which 
	contain all particle pairs that are involved in a bonded interaction with that particle. This 
	vector should be initialised by the Interaction object. Look how it is done in the DNA or RNA 
	interactions.
	- oxDNA now supports non-cubic boxes. Both CPU and CUDA backends have this.
	- The code now has a check that is not producing too much data. The default limit is set to 
	1 MB/s (after a 30-second grace period). This limit can be modified from the input file with the 
	keyword
	max_io = <float> [units of MB/s]
	and can be raised to any number should a user need to do so.
	- There is a new Timings class for more intuitive and usable timings.
	- oxDNA can now simulate the TEP model (see "Models for twistable elastic polymers in Brownian 
	dynamics, and their implementation for LAMMPS.", http://www.ncbi.nlm.nih.gov/pubmed/24712817)
	- Added a "reset_initial_com_momentum" option that, if set to true, will set the momentum of 
	the centre of mass of the initial configuration to 0. A similar key, "reset_com_momentum", will
	do the same every time the diffusion is fixed.
	- Added DOCS/HOWTO_write_interactions.txt, a short guide on how to write new interactions.
	- Added the Bussi-Donadio-Parrinello thermostat (from Bussi et al, J. Chem. Phys. 2007).
	- Checkpoints have been implemented, although not thoroughly tested, so that the code can be 
	restarted and follow the same trajectory. See the Doxygen documentation for SimBackend on how to 
	use them. This cannot work on CUDA due to the operation order not being predictable.
	- Implemented a new test suite. It is lighter and easier to use. Use "make test_run" and "make test_quick"
	to check whether the code runs and gives sensible results in simple cases, respectively.
	- Added the NPT ensemble to Monte Carlo simulations.
	- Added a new Monte Carlo backend that supports custom moves (src/Backends/MCMoves). It is 
	flexible and modular. It supports, rotations, translations, site-rotations, volume and shape
	moves and VMMC.
	- Added a segfault handler that prints out the intercept the SIGSEGV signal and prints out the 
	stacktrace of the program before crashing.
	- Added mismatch_repulsion (0 by default) option to RNA2 interaction. When set to 1 in input file, 
	it introduces repulsion potential between non-complementary bases.
	- Added a new type of wall (LJ_wall). In contrast with repulsion_plane, LJ_wall acts on both sides 
	and its properties can be finely tuned (the diameter, stiffness and steepness can all be chosen, 
	and the user can choose whether the wall should feature an attractive part or not). 
	- confGenerator can now be used to generate DNA and RNA initial configurations. These configurations
	are generated randomly and hence mostly composed of single strands in coil configurations.
	- Added some new relaxation strategies. See the NEW_RELAX_PROCEDURE/README file for details.
	- Added a simple (MC-like) barostat to the MD backends. The barostat_probability key makes it 
	possible to tune the coupling of the MC-like barostat. A value of 1 means that the barostat will be 
	applied every time step.
	- oxDNA can now be compiled with c++11-complaint compilers by setting the CMake CXX11 flag to 1 
	(-DCXX11=1). This might result in small speed-ups.
	- Added the cells_auto_optimisation key (defaults to true). If true, the number of cells (both on 
	CPU and GPU) will not exceed the number of particles, thus avoiding running out of memory when using 
	extremely large boxes. However, doing so might result in a performance hit, which is why the new key 
	was added. Experienced users might want to turn it off to optimise simulations.
	- Lees-Edwards boundary conditions to simulate systems under shear are now enabled for MD simulations
	(on CPU only). Simulating with shear requires the two mandatory keys
	lees_edwards = true
	lees_edwards_shear_rate = <float>
	Only Bussi, Langevin and DPD thermostats should be used to control the temperature of simulations 
	under shear.
	- UTILS/base.py and its main accompanying scripts are now compatible with numpy > 1.10

v 2.2.2 (June 2015)
	Fixed the hairpin example (see https://sourceforge.net/p/oxdna/discussion/general/thread/92fbef91/?limit=25#3c9b)

v 2.2.1 (May 2015)
	This release fixes a serious bug that could affect the calculation of the number of cells along 
	the box. In some cases this bug could affect the simulation outcome, as not all interacting
	pairs would be seen as such. All CPU backends (MD, MC, VMMC) were affected by this bug. 

v 2.2 (April 2015)
	This release includes the finalised code implementing the oxDNA2 model. In addition there are
	numerous bug fixes, more helpful error messages and other messages to the user, fixes to the 
	examples and various new features.
	- Added support for the oxDNA2 model. See the oxDNA wiki for more information. Use it by setting 
	interaction_type = DNA2 in the input file. The salt concentration must also be specified.
	- Added more observables.
	- Added more external forces.
	- Added GPU support for the salt-dependent RNA model.
	- Updated the syntax for the CPU order parameter parser (the old syntax still works). Non-
	consecutive numbers and letters can now be used to label particle pairs, and pairs can be added
	as lists. See commit message for revision 6431.
	- The Langevin thermostat may now be used on GPUs.
	- Reworked the way the oxDNA code handles plugins. It is now possible to use custom names for 
	the functions that act as entry points for the shared libraries. See the documentation in the 
	PluginManager class.
	- Various improvements to the python utility scripts.
	
v 2.1 (June 2014)
	This is mostly a bug-fixing release. We have fixed a few issues with different compilers
	and platforms and a few severe bugs that could result in segmentation faults.
	- Added support for interaction plugins. Now you can write separate classes to manage custom 
	interactions and load them in oxDNA as plugins. The mechanism is very similar to the one that
	manages observable plugins. See PluginManagement/PluginManager.h for additional documentation.
	- Added a new, improved and safer input parser. User-wise, the only difference with respect to
	the old parser is that it is now possible to put more than a single key-value pair on the same
	line by separating them with semicolons (e.g. key1 = value1; key2 = value2) 
	- Added salt-dependent DNA and RNA interactions. Note that these are still under development
	and then we advise not to use them as they are still subject to changes and possibly unstable.
	- A SRD (stochastic rotational dynamics) thermostat has been added. It works on both CPUs and
	GPUs. It seems working but we did not have thoroughly tested it. Use it at your own risk.
	- Added many observables (in the Observables folder).
	- Plenty of bugfixes, see commit messages for more information.

v 2.0 (March 2014)
	First release on sourceforge.
